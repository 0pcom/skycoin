package main

import (
	_ "net/http/pprof"
	"github.com/skycoin/skycoin/src/skycoin"
	"github.com/skycoin/skycoin/src/util/logging"
)

var (
	// Version of the node. Can be set by -ldflags
	Version = "{{.Version}}"
	// Commit ID. Can be set by -ldflags
	Commit = "{{.Commit}}"
	// Branch name. Can be set by -ldflags
	Branch = "{{.Branch}}"
	// ConfigMode (possible values are "", "STANDALONE_CLIENT").
	// This is used to change the default configuration.
	// Can be set by -ldflags
	ConfigMode = ""

	logger = logging.MustGetLogger("main")

	// GenesisSignatureStr hex string of genesis signature
	GenesisSignatureStr = "{{.GenesisSignatureStr}}"
	// GenesisAddressStr genesis address string
	GenesisAddressStr = "{{.GenesisAddressStr}}"
	// BlockchainPubkeyStr pubic key string
	BlockchainPubkeyStr = "{{.BlockchainPubkeyStr}}"
	// BlockchainSeckeyStr empty private key string
	BlockchainSeckeyStr = "{{.BlockchainSeckeyStr}}"

	// GenesisTimestamp genesis block create unix time
	GenesisTimestamp uint64 = {{.GenesisTimestamp}}
	// GenesisCoinVolume represents the coin capacity
	GenesisCoinVolume uint64 = {{.GenesisCoinVolume}}

	// DefaultConnections the default trust node addresses
	DefaultConnections = []string{
    {{- range $index, $address := .DefaultConnections}}
        "{{$address -}}",
    {{- end}}
	}
)

var devConfig = skycoin.NodeConfig{
	GenesisSignatureStr: GenesisSignatureStr,
	GenesisAddressStr:   GenesisAddressStr,
	GenesisCoinVolume:   GenesisCoinVolume,
	GenesisTimestamp:    GenesisTimestamp,
	BlockchainPubkeyStr: BlockchainPubkeyStr,
	BlockchainSeckeyStr: BlockchainSeckeyStr,
	DefaultConnections:  DefaultConnections,
	// Disable peer exchange
	DisablePEX: {{.DisablePEX}},
	// Don't make any outgoing connections
	DisableOutgoingConnections: {{.DisableOutgoingConnections}},
	// Don't allowing incoming connections
	DisableIncomingConnections: {{.DisableIncomingConnections}},
	// Disables networking altogether
	DisableNetworking: {{.DisableNetworking}},
	// Enable wallet API
	EnableWalletAPI: {{.EnableWalletAPI}},
	// Enable GUI
	EnableGUI: {{.EnableGUI}},
	// Enable unversioned API
	EnableUnversionedAPI: {{.EnableUnversionedAPI}},
	// Enable seed API
	EnableSeedAPI: {{.EnableSeedAPI}},
	// Disable CSRF check in the wallet API
	DisableCSRF: {{.DisableCSRF}},
	// Only run on localhost and only connect to others on localhost
	LocalhostOnly: {{.LocalhostOnly}},
	// Which address to serve on. Leave blank to automatically assign to a
	// public interface
	Address: "{{.Address}}",
	//gnet uses this for TCP incoming and outgoing
	Port: {{.Port}},
	// MaxOutgoingConnections is the maximum outgoing connections allowed.
	MaxOutgoingConnections: {{.MaxOutgoingConnections}},
	// MaxDefaultOutgoingConnections is the maximum default outgoing connections allowed.
	MaxDefaultPeerOutgoingConnections: {{.MaxDefaultPeerOutgoingConnections}},
	DownloadPeerList:                  {{.DownloadPeerList}},
	PeerListURL:                       "{{.PeerListURL}}",
	// How often to make outgoing connections, in seconds
	OutgoingConnectionsRate: {{.OutgoingConnectionsRate | parseDuration}}, // {{.OutgoingConnectionsRate}}
	PeerlistSize:            {{.PeerlistSize}},
	// Wallet Address Version
	//AddressVersion: "test",
	// Remote web interface
	WebInterface:      {{.WebInterface}},
	WebInterfacePort:  {{.WebInterfacePort}},
	WebInterfaceAddr:  "{{.WebInterfaceAddr}}",
	WebInterfaceCert:  "{{.WebInterfaceCert}}",
	WebInterfaceKey:   "{{.WebInterfaceKey}}",
	WebInterfaceHTTPS: {{.WebInterfaceHTTPS}},

	RPCInterface: {{.RPCInterface}},

	LaunchBrowser: false,
	// Data directory holds app data -- defaults to {{.DataDirectory}}
	DataDirectory: "{{.DataDirectory}}",
	// Web GUI static resources
	GUIDirectory: "{{.GUIDirectory}}",
	// Logging
	ColorLog:        {{.ColorLog}},
	LogLevel:        "{{.LogLevel}}",
	LogToFile:       {{.LogToFile}},
	DisablePingPong: {{.DisablePingPong}},

	VerifyDB:       {{.VerifyDB}},
	ResetCorruptDB: {{.ResetCorruptDB}},

	// Wallets
	WalletDirectory:  "{{.WalletDirectory}}",
	WalletCryptoType: "{{.WalletCryptoType}}",

	// Timeout settings for http.Server
	// https://blog.cloudflare.com/the-complete-guide-to-golang-net-http-timeouts/
	ReadTimeout:  {{.ReadTimeout | parseDuration}}, // {{.ReadTimeout}}
	WriteTimeout: {{.WriteTimeout | parseDuration}}, // {{.WriteTimeout}}
	IdleTimeout:  {{.IdleTimeout | parseDuration}}, // {{.IdleTimeout}}

	// Centralized network configuration
	RunMaster: {{.RunMaster}},
	/* Developer options */

	// Enable cpu profiling
	ProfileCPU: {{.ProfileCPU}},
	// Where the file is written to
	ProfileCPUFile: "{{.ProfileCPUFile}}",
	// HTTP profiling interface (see http://golang.org/pkg/net/http/pprof/)
	HTTPProf: {{.HTTPProf}},
}

func init() {
	applyConfigMode()
}

func applyConfigMode() {
	switch ConfigMode {
	case "":
	case "STANDALONE_CLIENT":
		devConfig.EnableWalletAPI = true
		devConfig.EnableGUI = true
		devConfig.EnableSeedAPI = true
		devConfig.LaunchBrowser = true
		devConfig.DisableCSRF = false
		devConfig.DownloadPeerList = true
		devConfig.RPCInterface = false
		devConfig.WebInterface = true
		devConfig.LogToFile = false
		devConfig.ColorLog = true
		devConfig.ResetCorruptDB = true
		devConfig.WebInterfacePort = 0 // randomize web interface port
	default:
		panic("Invalid ConfigMode")
	}
}

func main() {
	// create a new fiber coin instance
	coin := skycoin.NewCoin(
		skycoin.Config{
			Node: devConfig,
			Build: skycoin.BuildConfig{
				Version: Version,
				Commit:  Commit,
				Branch:  Branch,
			},
		},
		logger,
	)

	// parse config values
	coin.ParseConfig()

	// run fiber coin node
	coin.Run()
}
