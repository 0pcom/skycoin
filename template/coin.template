/*
skycoin daemon
*/
package commands

/*
CODE GENERATED AUTOMATICALLY WITH FIBER COIN CREATOR
AVOID EDITING THIS MANUALLY
*/

import (
	"fmt"
	"flag"
	_ "net/http/pprof"
	"os"

	"github.com/spf13/cobra"
	"github.com/skycoin/skycoin/src/fiber"
	"github.com/skycoin/skycoin/src/readable"
	"github.com/skycoin/skycoin/src/skycoin"
	"github.com/skycoin/skycoin/src/util/logging"

	// register the supported wallets
	_ "github.com/skycoin/skycoin/src/wallet/bip44wallet"
	_ "github.com/skycoin/skycoin/src/wallet/collection"
	_ "github.com/skycoin/skycoin/src/wallet/deterministic"
	_ "github.com/skycoin/skycoin/src/wallet/xpubwallet"
)

var (
	// Version of the node. Can be set by -ldflags
	Version = "0.27.1"
	// Commit ID. Can be set by -ldflags
	Commit = ""
	// Branch name. Can be set by -ldflags
	Branch = ""
	// ConfigMode (possible values are "", "STANDALONE_CLIENT").
	// This is used to change the default configuration.
	// Can be set by -ldflags
	ConfigMode = ""

	logger = logging.MustGetLogger("main")

	// CoinName name of coin
	CoinName = "{{.CoinName}}"

	// GenesisSignatureStr hex string of genesis signature
	GenesisSignatureStr = "{{.GenesisSignatureStr}}"
	// GenesisAddressStr genesis address string
	GenesisAddressStr = "{{.GenesisAddressStr}}"
	// BlockchainPubkeyStr pubic key string
	BlockchainPubkeyStr = "{{.BlockchainPubkeyStr}}"
	// BlockchainSeckeyStr empty private key string
	BlockchainSeckeyStr = "{{.BlockchainSeckeyStr}}"

	// GenesisTimestamp genesis block create unix time
	GenesisTimestamp uint64 = {{.GenesisTimestamp}}
	// GenesisCoinVolume represents the coin capacity
	GenesisCoinVolume uint64 = {{.GenesisCoinVolume}}

	// DefaultConnections the default trust node addresses
	DefaultConnections = []string{
	{{- range $index, $address := .DefaultConnections}}
		"{{$address -}}",
	{{- end}}
	}

	nodeConfig = skycoin.NewNodeConfig(ConfigMode, fiber.NodeConfig{
		CoinName:            CoinName,
		GenesisSignatureStr: GenesisSignatureStr,
		GenesisAddressStr:   GenesisAddressStr,
		GenesisCoinVolume:   GenesisCoinVolume,
		GenesisTimestamp:    GenesisTimestamp,
		BlockchainPubkeyStr: BlockchainPubkeyStr,
		BlockchainSeckeyStr: BlockchainSeckeyStr,
		DefaultConnections:  DefaultConnections,
		PeerListURL:         "{{.PeerListURL}}",
		Port:                {{.Port}},
		WebInterfacePort:    {{.WebInterfacePort}},
		DataDirectory:       "{{.DataDirectory}}",

		UnconfirmedBurnFactor:          {{.UnconfirmedBurnFactor}},
		UnconfirmedMaxTransactionSize:  {{.UnconfirmedMaxTransactionSize}},
		UnconfirmedMaxDropletPrecision: {{.UnconfirmedMaxDropletPrecision}},
		CreateBlockBurnFactor:          {{.CreateBlockBurnFactor}},
		CreateBlockMaxTransactionSize:  {{.CreateBlockMaxTransactionSize}},
		CreateBlockMaxDropletPrecision: {{.CreateBlockMaxDropletPrecision}},
		MaxBlockTransactionsSize:       {{.MaxBlockTransactionsSize}},

		DisplayName:           "{{.DisplayName}}",
		Ticker:                "{{.Ticker}}",
		CoinHoursName:         "{{.CoinHoursName}}",
		CoinHoursNameSingular: "{{.CoinHoursNameSingular}}",
		CoinHoursTicker:       "{{.CoinHoursTicker}}",
		QrURIPrefix:           "{{.QrURIPrefix}}",
		ExplorerURL:           "{{.ExplorerURL}}",
		VersionURL:            "{{.VersionURL}}",
		Bip44Coin:             {{.Bip44Coin}},
	})

	parseFlags = true
)

func init() {
	nodeConfig.RegisterFlags()
	syncFlagsWithCobra(RootCmd)
	RootCmd.AddCommand(helpCmd)
}

// RootCmd is the root command
var RootCmd = &cobra.Command{
	Use:     "{{.CoinName}}",
	Short:   "{{.CoinName}} wallet",
	Long: `
{{.CoinAscii}}
	{{.CoinName}} wallet`,
	Run:  func(cmd *cobra.Command, args []string) {
		if parseFlags {
			flag.Parse()
		}

		// create a new fiber coin instance
		coin := skycoin.NewCoin(skycoin.Config{
			Node: nodeConfig,
			Build: readable.BuildInfo{
				Version: Version,
				Commit:  Commit,
				Branch:  Branch,
			},
		}, logger)

		// parse config values
		if err := coin.ParseConfig(); err != nil {
			logger.Error(err)
			os.Exit(1)
		}

		// run fiber coin node
		if err := coin.Run(); err != nil {
			os.Exit(1)
		}
		},
}

// syncFlagsWithCobra transfers all `flag` package flags to Cobra.
func syncFlagsWithCobra(cmd *cobra.Command) {
	flag.CommandLine.VisitAll(func(f *flag.Flag) {
		// Add each `flag` as a Cobra flag with the same properties
		cmd.Flags().AddGoFlag(f)
	})
}

// helpCmd is a custom command to display `flag` and `cobra`-based flags
var helpCmd = &cobra.Command{
	Use:   "help",
	Short: "Show help",
	Run: func(cmd *cobra.Command, args []string) {
		// Print Cobra help
		fmt.Println("Cobra Flags:")
		cmd.Root().Help()

		// Print `flag`-based flags
		fmt.Println("\nGo Flag Package Flags:")
		flag.CommandLine.PrintDefaults()
	},
}

func init() {
	// Add custom help command to RootCmd
}
