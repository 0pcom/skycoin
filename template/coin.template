package main

import (
	_ "net/http/pprof"
	"time"

	"github.com/skycoin/skycoin/src/skycoin"
	"github.com/skycoin/skycoin/src/util/logging"
	"github.com/skycoin/skycoin/src/visor"
	"github.com/skycoin/skycoin/src/wallet"
)

var (
	// Version of the node. Can be set by -ldflags
	Version = "{{.Version}}"
	// Commit ID. Can be set by -ldflags
	Commit = ""
	// Branch name. Can be set by -ldflags
	Branch = ""
	// ConfigMode (possible values are "", "STANDALONE_CLIENT").
	// This is used to change the default configuration.
	// Can be set by -ldflags
	ConfigMode = ""

	logger = logging.MustGetLogger("main")

	// GenesisSignatureStr hex string of genesis signature
	GenesisSignatureStr = "{{.GenesisSignatureStr}}"
	// GenesisAddressStr genesis address string
	GenesisAddressStr = "{{.GenesisAddressStr}}"
	// BlockchainPubkeyStr pubic key string
	BlockchainPubkeyStr = "{{.BlockchainPubkeyStr}}"
	// BlockchainSeckeyStr empty private key string
	BlockchainSeckeyStr = "{{.BlockchainSeckeyStr}}"

	// GenesisTimestamp genesis block create unix time
	GenesisTimestamp uint64 = {{.GenesisTimestamp}}
	// GenesisCoinVolume represents the coin capacity
	GenesisCoinVolume uint64 = {{.GenesisCoinVolume}}

	// DefaultConnections the default trust node addresses
	DefaultConnections = []string{
    {{- range $index, $address := .DefaultConnections}}
        "{{$address -}}",
    {{- end}}
	}
)

var devConfig = skycoin.NodeConfig{
	GenesisSignatureStr: GenesisSignatureStr,
	GenesisAddressStr:   GenesisAddressStr,
	GenesisCoinVolume:   GenesisCoinVolume,
	GenesisTimestamp:    GenesisTimestamp,
	BlockchainPubkeyStr: BlockchainPubkeyStr,
	BlockchainSeckeyStr: BlockchainSeckeyStr,
	DefaultConnections:  DefaultConnections,
	// Disable peer exchange
	DisablePEX: false,
	// Don't make any outgoing connections
	DisableOutgoingConnections: false,
	// Don't allowing incoming connections
	DisableIncomingConnections: false,
	// Disables networking altogether
	DisableNetworking: false,
	// Enable wallet API
	EnableWalletAPI: false,
	// Enable GUI
	EnableGUI: false,
	// Enable unversioned API
	EnableUnversionedAPI: false,
	// Enable seed API
	EnableSeedAPI: false,
	// Disable CSRF check in the wallet API
	DisableCSRF: false,
	// Only run on localhost and only connect to others on localhost
	LocalhostOnly: false,
	// Which address to serve on. Leave blank to automatically assign to a
	// public interface
	Address: "",
	//gnet uses this for TCP incoming and outgoing
	Port: {{.Port}},
	// MaxOutgoingConnections is the maximum outgoing connections allowed.
	MaxOutgoingConnections: 8,
	// MaxDefaultOutgoingConnections is the maximum default outgoing connections allowed.
	MaxDefaultPeerOutgoingConnections: 1,
	DownloadPeerList:                  true,
	PeerListURL:                       "{{.PeerListURL}}",
	// How often to make outgoing connections, in seconds
	OutgoingConnectionsRate: time.Second*5,
	PeerlistSize: 65535,
	// Wallet Address Version
	//AddressVersion: "test",
	// Remote web interface
	WebInterface:      true,
	WebInterfacePort:  {{.WebInterfacePort}},
	WebInterfaceAddr:  "127.0.0.1",
	WebInterfaceCert:  "",
	WebInterfaceKey:   "",
	WebInterfaceHTTPS: false,

	RPCInterface: true,

	LaunchBrowser: false,
	// Data directory holds app data -- defaults to {{.DataDirectory}}
	DataDirectory: "{{.DataDirectory}}",
	// Web GUI static resources
	GUIDirectory: "./src/gui/static/",
	// Logging
	ColorLog:        true,
	LogLevel:        "INFO",
	LogToFile:       false,
	DisablePingPong: false,

	VerifyDB:       true,
	ResetCorruptDB: false,

	// Wallets
	WalletDirectory:  "",
	WalletCryptoType: string(wallet.CryptoTypeScryptChacha20poly1305),

    // Timeout settings for http.Server
    // https://blog.cloudflare.com/the-complete-guide-to-golang-net-http-timeouts/
    ReadTimeout:  time.Second * 10,
    WriteTimeout: time.Second * 60,
    IdleTimeout:  time.Second * 120,

	// Centralized network configuration
	RunMaster: false,
	/* Developer options */

	// Enable cpu profiling
	ProfileCPU: false,
	// Where the file is written to
	ProfileCPUFile: "{{.ProfileCPUFile}}",
	// HTTP profiling interface (see http://golang.org/pkg/net/http/pprof/)
	HTTPProf: false,
}

func init() {
	applyConfigMode()
}

func applyConfigMode() {
	switch ConfigMode {
	case "":
	case "STANDALONE_CLIENT":
		devConfig.EnableWalletAPI = true
		devConfig.EnableGUI = true
		devConfig.EnableSeedAPI = true
		devConfig.LaunchBrowser = true
		devConfig.DisableCSRF = false
		devConfig.DownloadPeerList = true
		devConfig.RPCInterface = false
		devConfig.WebInterface = true
		devConfig.LogToFile = false
		devConfig.ColorLog = true
		devConfig.ResetCorruptDB = true
		devConfig.WebInterfacePort = 0 // randomize web interface port
	default:
		panic("Invalid ConfigMode")
	}
}

func main() {
    // get node config
    nodeConfig := skycoin.NewNodeConfig(ConfigMode, skycoin.NodeParameters{
        GenesisSignatureStr: GenesisSignatureStr,
        GenesisAddressStr:   GenesisAddressStr,
        GenesisCoinVolume:   GenesisCoinVolume,
        GenesisTimestamp:    GenesisTimestamp,
        BlockchainPubkeyStr: BlockchainPubkeyStr,
        BlockchainSeckeyStr: BlockchainSeckeyStr,
        DefaultConnections:  DefaultConnections,
        PeerListURL:         "{{.PeerListURL}}",
        Port:                {{.Port}},
        WebInterfacePort:    {{.WebInterfacePort}},
        DataDirectory:       "{{.DataDirectory}}",
        ProfileCPUFile:      "{{.ProfileCPUFile}}",
    })

    // create a new fiber coin instance
    coin := skycoin.NewCoin(
        skycoin.Config{
            Node: *nodeConfig,
            Build: visor.BuildInfo{
                Version: Version,
                Commit:  Commit,
                Branch:  Branch,
            },
        },
        logger,
    )

    // parse config values
    coin.ParseConfig()

    // run fiber coin node
    coin.Run()
}
