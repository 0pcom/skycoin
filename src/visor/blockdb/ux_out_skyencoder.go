// Code generated by github.com/skycoin/skyencoder. DO NOT EDIT.
package blockdb

import (
	"github.com/skycoin/skycoin/src/cipher/encoder"
	"github.com/skycoin/skycoin/src/coin"
)

// EncodeSizeUxOut computes the size of an encoded object of type UxOut
func EncodeSizeUxOut(obj *coin.UxOut) int {
	i0 := 0

	// obj.Head.Time
	i0 += 8

	// obj.Head.BkSeq
	i0 += 8

	// obj.Body.SrcTransaction
	i0 += 32

	// obj.Body.Address.Version
	i0++

	// obj.Body.Address.Key
	i0 += 20

	// obj.Body.Coins
	i0 += 8

	// obj.Body.Hours
	i0 += 8

	return i0
}

// EncodeUxOut encodes an object of type UxOut to the buffer in encoder.Encoder.
// The buffer must be large enough to encode the object, otherwise an error is returned.
func EncodeUxOut(buf []byte, obj *coin.UxOut) error {
	e := &encoder.Encoder{
		Buffer: buf[:],
	}

	// obj.Head.Time
	e.Uint64(obj.Head.Time)

	// obj.Head.BkSeq
	e.Uint64(obj.Head.BkSeq)

	// obj.Body.SrcTransaction
	e.CopyBytes(obj.Body.SrcTransaction[:])

	// obj.Body.Address.Version
	e.Uint8(obj.Body.Address.Version)

	// obj.Body.Address.Key
	e.CopyBytes(obj.Body.Address.Key[:])

	// obj.Body.Coins
	e.Uint64(obj.Body.Coins)

	// obj.Body.Hours
	e.Uint64(obj.Body.Hours)

	return nil
}

// DecodeUxOut decodes an object of type UxOut from the buffer in encoder.Decoder.
// If the buffer has any remaining bytes after decoding, an error is returned,
// except when conforming to an omitempty declaration on the final field.
func DecodeUxOut(buf []byte, obj *coin.UxOut) error {
	d := &encoder.Decoder{
		Buffer: buf[:],
	}

	{
		// obj.Head.Time
		i, err := d.Uint64()
		if err != nil {
			return err
		}
		obj.Head.Time = i
	}

	{
		// obj.Head.BkSeq
		i, err := d.Uint64()
		if err != nil {
			return err
		}
		obj.Head.BkSeq = i
	}

	{
		// obj.Body.SrcTransaction
		if len(d.Buffer) < len(obj.Body.SrcTransaction) {
			return encoder.ErrBufferUnderflow
		}
		copy(obj.Body.SrcTransaction[:], d.Buffer[:len(obj.Body.SrcTransaction)])
		d.Buffer = d.Buffer[len(obj.Body.SrcTransaction):]
	}

	{
		// obj.Body.Address.Version
		i, err := d.Uint8()
		if err != nil {
			return err
		}
		obj.Body.Address.Version = i
	}

	{
		// obj.Body.Address.Key
		if len(d.Buffer) < len(obj.Body.Address.Key) {
			return encoder.ErrBufferUnderflow
		}
		copy(obj.Body.Address.Key[:], d.Buffer[:len(obj.Body.Address.Key)])
		d.Buffer = d.Buffer[len(obj.Body.Address.Key):]
	}

	{
		// obj.Body.Coins
		i, err := d.Uint64()
		if err != nil {
			return err
		}
		obj.Body.Coins = i
	}

	{
		// obj.Body.Hours
		i, err := d.Uint64()
		if err != nil {
			return err
		}
		obj.Body.Hours = i
	}

	if len(d.Buffer) != 0 {
		return encoder.ErrRemainingBytes
	}

	return nil
}
