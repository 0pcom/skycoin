// Code generated by github.com/skycoin/skyencoder. DO NOT EDIT.
package blockdb

import (
	"errors"
	"math"

	"github.com/skycoin/skycoin/src/cipher"
	"github.com/skycoin/skycoin/src/cipher/encoder"
	"github.com/skycoin/skycoin/src/coin"
)

// EncodeSizeBlock computes the size of an encoded object of type Block
func EncodeSizeBlock(obj *coin.Block) int {
	i0 := 0

	// obj.Head.Version
	i0 += 4

	// obj.Head.Time
	i0 += 8

	// obj.Head.BkSeq
	i0 += 8

	// obj.Head.Fee
	i0 += 8

	// obj.Head.PrevHash
	i0 += 32

	// obj.Head.BodyHash
	i0 += 32

	// obj.Head.UxHash
	i0 += 32

	// obj.Body.Transactions
	i0 += 4
	for _, x := range obj.Body.Transactions {
		i1 := 0

		// x.Length
		i1 += 4

		// x.Type
		i1++

		// x.InnerHash
		i1 += 32

		// x.Sigs
		i1 += 4
		{
			i2 := 0

			// x
			i2 += 65

			i1 += len(x.Sigs) * i2
		}

		// x.In
		i1 += 4
		{
			i2 := 0

			// x
			i2 += 32

			i1 += len(x.In) * i2
		}

		// x.Out
		i1 += 4
		{
			i2 := 0

			// x.Address.Version
			i2++

			// x.Address.Key
			i2 += 20

			// x.Coins
			i2 += 8

			// x.Hours
			i2 += 8

			i1 += len(x.Out) * i2
		}

		i0 += i1
	}

	return i0
}

// EncodeBlock encodes an object of type Block to the buffer in encoder.Encoder.
// The buffer must be large enough to encode the object, otherwise an error is returned.
func EncodeBlock(buf []byte, obj *coin.Block) error {
	e := &encoder.Encoder{
		Buffer: buf[:],
	}

	// obj.Head.Version
	e.Uint32(obj.Head.Version)

	// obj.Head.Time
	e.Uint64(obj.Head.Time)

	// obj.Head.BkSeq
	e.Uint64(obj.Head.BkSeq)

	// obj.Head.Fee
	e.Uint64(obj.Head.Fee)

	// obj.Head.PrevHash
	e.CopyBytes(obj.Head.PrevHash[:])

	// obj.Head.BodyHash
	e.CopyBytes(obj.Head.BodyHash[:])

	// obj.Head.UxHash
	e.CopyBytes(obj.Head.UxHash[:])

	// obj.Body.Transactions length check
	if len(obj.Body.Transactions) > math.MaxUint32 {
		return errors.New("obj.Body.Transactions length exceeds math.MaxUint32")
	}

	// obj.Body.Transactions length
	e.Uint32(uint32(len(obj.Body.Transactions)))

	// obj.Body.Transactions
	for _, x := range obj.Body.Transactions {

		// x.Length
		e.Uint32(x.Length)

		// x.Type
		e.Uint8(x.Type)

		// x.InnerHash
		e.CopyBytes(x.InnerHash[:])

		// x.Sigs length check
		if len(x.Sigs) > math.MaxUint32 {
			return errors.New("x.Sigs length exceeds math.MaxUint32")
		}

		// x.Sigs length
		e.Uint32(uint32(len(x.Sigs)))

		// x.Sigs
		for _, x := range x.Sigs {

			// x
			e.CopyBytes(x[:])

		}

		// x.In length check
		if len(x.In) > math.MaxUint32 {
			return errors.New("x.In length exceeds math.MaxUint32")
		}

		// x.In length
		e.Uint32(uint32(len(x.In)))

		// x.In
		for _, x := range x.In {

			// x
			e.CopyBytes(x[:])

		}

		// x.Out length check
		if len(x.Out) > math.MaxUint32 {
			return errors.New("x.Out length exceeds math.MaxUint32")
		}

		// x.Out length
		e.Uint32(uint32(len(x.Out)))

		// x.Out
		for _, x := range x.Out {

			// x.Address.Version
			e.Uint8(x.Address.Version)

			// x.Address.Key
			e.CopyBytes(x.Address.Key[:])

			// x.Coins
			e.Uint64(x.Coins)

			// x.Hours
			e.Uint64(x.Hours)

		}

	}

	return nil
}

// DecodeBlock decodes an object of type Block from the buffer in encoder.Decoder.
// If the buffer has any remaining bytes after decoding, an error is returned,
// except when conforming to an omitempty declaration on the final field.
func DecodeBlock(buf []byte, obj *coin.Block) error {
	d := &encoder.Decoder{
		Buffer: buf[:],
	}

	{
		// obj.Head.Version
		i, err := d.Uint32()
		if err != nil {
			return err
		}
		obj.Head.Version = i
	}

	{
		// obj.Head.Time
		i, err := d.Uint64()
		if err != nil {
			return err
		}
		obj.Head.Time = i
	}

	{
		// obj.Head.BkSeq
		i, err := d.Uint64()
		if err != nil {
			return err
		}
		obj.Head.BkSeq = i
	}

	{
		// obj.Head.Fee
		i, err := d.Uint64()
		if err != nil {
			return err
		}
		obj.Head.Fee = i
	}

	{
		// obj.Head.PrevHash
		if len(d.Buffer) < len(obj.Head.PrevHash) {
			return encoder.ErrBufferUnderflow
		}
		copy(obj.Head.PrevHash[:], d.Buffer[:len(obj.Head.PrevHash)])
		d.Buffer = d.Buffer[len(obj.Head.PrevHash):]
	}

	{
		// obj.Head.BodyHash
		if len(d.Buffer) < len(obj.Head.BodyHash) {
			return encoder.ErrBufferUnderflow
		}
		copy(obj.Head.BodyHash[:], d.Buffer[:len(obj.Head.BodyHash)])
		d.Buffer = d.Buffer[len(obj.Head.BodyHash):]
	}

	{
		// obj.Head.UxHash
		if len(d.Buffer) < len(obj.Head.UxHash) {
			return encoder.ErrBufferUnderflow
		}
		copy(obj.Head.UxHash[:], d.Buffer[:len(obj.Head.UxHash)])
		d.Buffer = d.Buffer[len(obj.Head.UxHash):]
	}

	{
		// obj.Body.Transactions

		ul, err := d.Uint32()
		if err != nil {
			return err
		}

		length := int(ul)
		if length < 0 || length > len(d.Buffer) {
			return encoder.ErrBufferUnderflow
		}

		if length != 0 {
			obj.Body.Transactions = make([]coin.Transaction, length)

			for z2 := range obj.Body.Transactions {
				{
					// obj.Body.Transactions[z2].Length
					i, err := d.Uint32()
					if err != nil {
						return err
					}
					obj.Body.Transactions[z2].Length = i
				}

				{
					// obj.Body.Transactions[z2].Type
					i, err := d.Uint8()
					if err != nil {
						return err
					}
					obj.Body.Transactions[z2].Type = i
				}

				{
					// obj.Body.Transactions[z2].InnerHash
					if len(d.Buffer) < len(obj.Body.Transactions[z2].InnerHash) {
						return encoder.ErrBufferUnderflow
					}
					copy(obj.Body.Transactions[z2].InnerHash[:], d.Buffer[:len(obj.Body.Transactions[z2].InnerHash)])
					d.Buffer = d.Buffer[len(obj.Body.Transactions[z2].InnerHash):]
				}

				{
					// obj.Body.Transactions[z2].Sigs

					ul, err := d.Uint32()
					if err != nil {
						return err
					}

					length := int(ul)
					if length < 0 || length > len(d.Buffer) {
						return encoder.ErrBufferUnderflow
					}

					if length != 0 {
						obj.Body.Transactions[z2].Sigs = make([]cipher.Sig, length)

						for z4 := range obj.Body.Transactions[z2].Sigs {
							{
								// obj.Body.Transactions[z2].Sigs[z4]
								if len(d.Buffer) < len(obj.Body.Transactions[z2].Sigs[z4]) {
									return encoder.ErrBufferUnderflow
								}
								copy(obj.Body.Transactions[z2].Sigs[z4][:], d.Buffer[:len(obj.Body.Transactions[z2].Sigs[z4])])
								d.Buffer = d.Buffer[len(obj.Body.Transactions[z2].Sigs[z4]):]
							}

						}
					}
				}

				{
					// obj.Body.Transactions[z2].In

					ul, err := d.Uint32()
					if err != nil {
						return err
					}

					length := int(ul)
					if length < 0 || length > len(d.Buffer) {
						return encoder.ErrBufferUnderflow
					}

					if length != 0 {
						obj.Body.Transactions[z2].In = make([]cipher.SHA256, length)

						for z4 := range obj.Body.Transactions[z2].In {
							{
								// obj.Body.Transactions[z2].In[z4]
								if len(d.Buffer) < len(obj.Body.Transactions[z2].In[z4]) {
									return encoder.ErrBufferUnderflow
								}
								copy(obj.Body.Transactions[z2].In[z4][:], d.Buffer[:len(obj.Body.Transactions[z2].In[z4])])
								d.Buffer = d.Buffer[len(obj.Body.Transactions[z2].In[z4]):]
							}

						}
					}
				}

				{
					// obj.Body.Transactions[z2].Out

					ul, err := d.Uint32()
					if err != nil {
						return err
					}

					length := int(ul)
					if length < 0 || length > len(d.Buffer) {
						return encoder.ErrBufferUnderflow
					}

					if length != 0 {
						obj.Body.Transactions[z2].Out = make([]coin.TransactionOutput, length)

						for z4 := range obj.Body.Transactions[z2].Out {
							{
								// obj.Body.Transactions[z2].Out[z4].Address.Version
								i, err := d.Uint8()
								if err != nil {
									return err
								}
								obj.Body.Transactions[z2].Out[z4].Address.Version = i
							}

							{
								// obj.Body.Transactions[z2].Out[z4].Address.Key
								if len(d.Buffer) < len(obj.Body.Transactions[z2].Out[z4].Address.Key) {
									return encoder.ErrBufferUnderflow
								}
								copy(obj.Body.Transactions[z2].Out[z4].Address.Key[:], d.Buffer[:len(obj.Body.Transactions[z2].Out[z4].Address.Key)])
								d.Buffer = d.Buffer[len(obj.Body.Transactions[z2].Out[z4].Address.Key):]
							}

							{
								// obj.Body.Transactions[z2].Out[z4].Coins
								i, err := d.Uint64()
								if err != nil {
									return err
								}
								obj.Body.Transactions[z2].Out[z4].Coins = i
							}

							{
								// obj.Body.Transactions[z2].Out[z4].Hours
								i, err := d.Uint64()
								if err != nil {
									return err
								}
								obj.Body.Transactions[z2].Out[z4].Hours = i
							}

						}
					}
				}
			}
		}
	}

	if len(d.Buffer) != 0 {
		return encoder.ErrRemainingBytes
	}

	return nil
}
