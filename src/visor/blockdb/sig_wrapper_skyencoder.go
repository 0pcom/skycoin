// Code generated by github.com/skycoin/skyencoder. DO NOT EDIT.
package blockdb

import "github.com/skycoin/skycoin/src/cipher/encoder"

// EncodeSizeSigWrapper computes the size of an encoded object of type SigWrapper
func EncodeSizeSigWrapper(obj *SigWrapper) int {
	i0 := 0

	// obj.Sig
	i0 += 65

	return i0
}

// EncodeSigWrapper encodes an object of type SigWrapper to the buffer in encoder.Encoder.
// The buffer must be large enough to encode the object, otherwise an error is returned.
func EncodeSigWrapper(buf []byte, obj *SigWrapper) error {
	e := &encoder.Encoder{
		Buffer: buf[:],
	}

	// obj.Sig
	e.CopyBytes(obj.Sig[:])

	return nil
}

// DecodeSigWrapper decodes an object of type SigWrapper from the buffer in encoder.Decoder.
// If the buffer has any remaining bytes after decoding, an error is returned,
// except when conforming to an omitempty declaration on the final field.
func DecodeSigWrapper(buf []byte, obj *SigWrapper) error {
	d := &encoder.Decoder{
		Buffer: buf[:],
	}

	{
		// obj.Sig
		if len(d.Buffer) < len(obj.Sig) {
			return encoder.ErrBufferUnderflow
		}
		copy(obj.Sig[:], d.Buffer[:len(obj.Sig)])
		d.Buffer = d.Buffer[len(obj.Sig):]
	}

	if len(d.Buffer) != 0 {
		return encoder.ErrRemainingBytes
	}

	return nil
}
