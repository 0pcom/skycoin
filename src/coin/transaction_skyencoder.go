// Code generated by github.com/skycoin/skyencoder. DO NOT EDIT.
package coin

import (
	"errors"
	"math"

	"github.com/skycoin/skycoin/src/cipher"
	"github.com/skycoin/skycoin/src/cipher/encoder"
)

// encodeSizeTransaction computes the size of an encoded object of type Transaction
func encodeSizeTransaction(obj *Transaction) uint64 {
	i0 := uint64(0)

	// obj.Length
	i0 += 4

	// obj.Type
	i0++

	// obj.InnerHash
	i0 += 32

	// obj.Sigs
	i0 += 4
	{
		i1 := uint64(0)

		// x
		i1 += 65

		i0 += uint64(len(obj.Sigs)) * i1
	}

	// obj.In
	i0 += 4
	{
		i1 := uint64(0)

		// x
		i1 += 32

		i0 += uint64(len(obj.In)) * i1
	}

	// obj.Out
	i0 += 4
	{
		i1 := uint64(0)

		// x.Address.Version
		i1++

		// x.Address.Key
		i1 += 20

		// x.Coins
		i1 += 8

		// x.Hours
		i1 += 8

		i0 += uint64(len(obj.Out)) * i1
	}

	return i0
}

// encodeTransaction encodes an object of type Transaction to the buffer in encoder.Encoder.
// The buffer must be large enough to encode the object, otherwise an error is returned.
func encodeTransaction(buf []byte, obj *Transaction) error {
	e := &encoder.Encoder{
		Buffer: buf[:],
	}

	// obj.Length
	e.Uint32(obj.Length)

	// obj.Type
	e.Uint8(obj.Type)

	// obj.InnerHash
	e.CopyBytes(obj.InnerHash[:])

	// obj.Sigs maxlen check
	if len(obj.Sigs) > 65535 {
		return encoder.ErrMaxLenExceeded
	}

	// obj.Sigs length check
	if uint64(len(obj.Sigs)) > math.MaxUint32 {
		return errors.New("obj.Sigs length exceeds math.MaxUint32")
	}

	// obj.Sigs length
	e.Uint32(uint32(len(obj.Sigs)))

	// obj.Sigs
	for _, x := range obj.Sigs {

		// x
		e.CopyBytes(x[:])

	}

	// obj.In maxlen check
	if len(obj.In) > 65535 {
		return encoder.ErrMaxLenExceeded
	}

	// obj.In length check
	if uint64(len(obj.In)) > math.MaxUint32 {
		return errors.New("obj.In length exceeds math.MaxUint32")
	}

	// obj.In length
	e.Uint32(uint32(len(obj.In)))

	// obj.In
	for _, x := range obj.In {

		// x
		e.CopyBytes(x[:])

	}

	// obj.Out maxlen check
	if len(obj.Out) > 65535 {
		return encoder.ErrMaxLenExceeded
	}

	// obj.Out length check
	if uint64(len(obj.Out)) > math.MaxUint32 {
		return errors.New("obj.Out length exceeds math.MaxUint32")
	}

	// obj.Out length
	e.Uint32(uint32(len(obj.Out)))

	// obj.Out
	for _, x := range obj.Out {

		// x.Address.Version
		e.Uint8(x.Address.Version)

		// x.Address.Key
		e.CopyBytes(x.Address.Key[:])

		// x.Coins
		e.Uint64(x.Coins)

		// x.Hours
		e.Uint64(x.Hours)

	}

	return nil
}

// decodeTransaction decodes an object of type Transaction from the buffer in encoder.Decoder.
// Returns the number of bytes used from the buffer to decode the object.
func decodeTransaction(buf []byte, obj *Transaction) (int, error) {
	d := &encoder.Decoder{
		Buffer: buf[:],
	}

	{
		// obj.Length
		i, err := d.Uint32()
		if err != nil {
			return len(buf) - len(d.Buffer), err
		}
		obj.Length = i
	}

	{
		// obj.Type
		i, err := d.Uint8()
		if err != nil {
			return len(buf) - len(d.Buffer), err
		}
		obj.Type = i
	}

	{
		// obj.InnerHash
		if len(d.Buffer) < len(obj.InnerHash) {
			return len(buf) - len(d.Buffer), encoder.ErrBufferUnderflow
		}
		copy(obj.InnerHash[:], d.Buffer[:len(obj.InnerHash)])
		d.Buffer = d.Buffer[len(obj.InnerHash):]
	}

	{
		// obj.Sigs

		ul, err := d.Uint32()
		if err != nil {
			return len(buf) - len(d.Buffer), err
		}

		length := int(ul)
		if length < 0 || length > len(d.Buffer) {
			return len(buf) - len(d.Buffer), encoder.ErrBufferUnderflow
		}

		if length > 65535 {
			return len(buf) - len(d.Buffer), encoder.ErrMaxLenExceeded
		}

		if length != 0 {
			obj.Sigs = make([]cipher.Sig, length)

			for z1 := range obj.Sigs {
				{
					// obj.Sigs[z1]
					if len(d.Buffer) < len(obj.Sigs[z1]) {
						return len(buf) - len(d.Buffer), encoder.ErrBufferUnderflow
					}
					copy(obj.Sigs[z1][:], d.Buffer[:len(obj.Sigs[z1])])
					d.Buffer = d.Buffer[len(obj.Sigs[z1]):]
				}

			}
		}
	}

	{
		// obj.In

		ul, err := d.Uint32()
		if err != nil {
			return len(buf) - len(d.Buffer), err
		}

		length := int(ul)
		if length < 0 || length > len(d.Buffer) {
			return len(buf) - len(d.Buffer), encoder.ErrBufferUnderflow
		}

		if length > 65535 {
			return len(buf) - len(d.Buffer), encoder.ErrMaxLenExceeded
		}

		if length != 0 {
			obj.In = make([]cipher.SHA256, length)

			for z1 := range obj.In {
				{
					// obj.In[z1]
					if len(d.Buffer) < len(obj.In[z1]) {
						return len(buf) - len(d.Buffer), encoder.ErrBufferUnderflow
					}
					copy(obj.In[z1][:], d.Buffer[:len(obj.In[z1])])
					d.Buffer = d.Buffer[len(obj.In[z1]):]
				}

			}
		}
	}

	{
		// obj.Out

		ul, err := d.Uint32()
		if err != nil {
			return len(buf) - len(d.Buffer), err
		}

		length := int(ul)
		if length < 0 || length > len(d.Buffer) {
			return len(buf) - len(d.Buffer), encoder.ErrBufferUnderflow
		}

		if length > 65535 {
			return len(buf) - len(d.Buffer), encoder.ErrMaxLenExceeded
		}

		if length != 0 {
			obj.Out = make([]TransactionOutput, length)

			for z1 := range obj.Out {
				{
					// obj.Out[z1].Address.Version
					i, err := d.Uint8()
					if err != nil {
						return len(buf) - len(d.Buffer), err
					}
					obj.Out[z1].Address.Version = i
				}

				{
					// obj.Out[z1].Address.Key
					if len(d.Buffer) < len(obj.Out[z1].Address.Key) {
						return len(buf) - len(d.Buffer), encoder.ErrBufferUnderflow
					}
					copy(obj.Out[z1].Address.Key[:], d.Buffer[:len(obj.Out[z1].Address.Key)])
					d.Buffer = d.Buffer[len(obj.Out[z1].Address.Key):]
				}

				{
					// obj.Out[z1].Coins
					i, err := d.Uint64()
					if err != nil {
						return len(buf) - len(d.Buffer), err
					}
					obj.Out[z1].Coins = i
				}

				{
					// obj.Out[z1].Hours
					i, err := d.Uint64()
					if err != nil {
						return len(buf) - len(d.Buffer), err
					}
					obj.Out[z1].Hours = i
				}

			}
		}
	}

	return len(buf) - len(d.Buffer), nil
}
