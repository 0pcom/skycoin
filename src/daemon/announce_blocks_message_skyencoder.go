// Code generated by github.com/skycoin/skyencoder. DO NOT EDIT.
package daemon

import "github.com/skycoin/skycoin/src/cipher/encoder"

// EncodeSizeAnnounceBlocksMessage computes the size of an encoded object of type AnnounceBlocksMessage
func EncodeSizeAnnounceBlocksMessage(obj *AnnounceBlocksMessage) uint64 {
	i0 := uint64(0)

	// obj.MaxBkSeq
	i0 += 8

	return i0
}

// EncodeAnnounceBlocksMessage encodes an object of type AnnounceBlocksMessage to the buffer in encoder.Encoder.
// The buffer must be large enough to encode the object, otherwise an error is returned.
func EncodeAnnounceBlocksMessage(buf []byte, obj *AnnounceBlocksMessage) error {
	e := &encoder.Encoder{
		Buffer: buf[:],
	}

	// obj.MaxBkSeq
	e.Uint64(obj.MaxBkSeq)

	return nil
}

// DecodeAnnounceBlocksMessage decodes an object of type AnnounceBlocksMessage from the buffer in encoder.Decoder.
// Returns the number of bytes used from the buffer to decode the object.
func DecodeAnnounceBlocksMessage(buf []byte, obj *AnnounceBlocksMessage) (int, error) {
	d := &encoder.Decoder{
		Buffer: buf[:],
	}

	{
		// obj.MaxBkSeq
		i, err := d.Uint64()
		if err != nil {
			return len(buf) - len(d.Buffer), err
		}
		obj.MaxBkSeq = i
	}

	return len(buf) - len(d.Buffer), nil
}
