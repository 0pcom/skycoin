// Code generated by github.com/skycoin/skyencoder. DO NOT EDIT.
package daemon

import (
	"errors"
	"math"

	"github.com/skycoin/skycoin/src/cipher"
	"github.com/skycoin/skycoin/src/cipher/encoder"
)

// encodeSizeGetTxnsMessage computes the size of an encoded object of type GetTxnsMessage
func encodeSizeGetTxnsMessage(obj *GetTxnsMessage) uint64 {
	i0 := uint64(0)

	// obj.Transactions
	i0 += 4
	{
		i1 := uint64(0)

		// x
		i1 += 32

		i0 += uint64(len(obj.Transactions)) * i1
	}

	return i0
}

// encodeGetTxnsMessage encodes an object of type GetTxnsMessage to the buffer in encoder.Encoder.
// The buffer must be large enough to encode the object, otherwise an error is returned.
func encodeGetTxnsMessage(buf []byte, obj *GetTxnsMessage) error {
	e := &encoder.Encoder{
		Buffer: buf[:],
	}

	// obj.Transactions length check
	if uint64(len(obj.Transactions)) > math.MaxUint32 {
		return errors.New("obj.Transactions length exceeds math.MaxUint32")
	}

	// obj.Transactions length
	e.Uint32(uint32(len(obj.Transactions)))

	// obj.Transactions
	for _, x := range obj.Transactions {

		// x
		e.CopyBytes(x[:])

	}

	return nil
}

// decodeGetTxnsMessage decodes an object of type GetTxnsMessage from the buffer in encoder.Decoder.
// Returns the number of bytes used from the buffer to decode the object.
func decodeGetTxnsMessage(buf []byte, obj *GetTxnsMessage) (int, error) {
	d := &encoder.Decoder{
		Buffer: buf[:],
	}

	{
		// obj.Transactions

		ul, err := d.Uint32()
		if err != nil {
			return len(buf) - len(d.Buffer), err
		}

		length := int(ul)
		if length < 0 || length > len(d.Buffer) {
			return len(buf) - len(d.Buffer), encoder.ErrBufferUnderflow
		}

		if length != 0 {
			obj.Transactions = make([]cipher.SHA256, length)

			for z1 := range obj.Transactions {
				{
					// obj.Transactions[z1]
					if len(d.Buffer) < len(obj.Transactions[z1]) {
						return len(buf) - len(d.Buffer), encoder.ErrBufferUnderflow
					}
					copy(obj.Transactions[z1][:], d.Buffer[:len(obj.Transactions[z1])])
					d.Buffer = d.Buffer[len(obj.Transactions[z1]):]
				}

			}
		}
	}

	return len(buf) - len(d.Buffer), nil
}
