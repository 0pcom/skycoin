// Code generated by github.com/skycoin/skyencoder. DO NOT EDIT.
package daemon

import (
	"errors"
	"math"

	"github.com/skycoin/skycoin/src/cipher/encoder"
)

// encodeSizeDisconnectMessage computes the size of an encoded object of type DisconnectMessage
func encodeSizeDisconnectMessage(obj *DisconnectMessage) uint64 {
	i0 := uint64(0)

	// obj.ReasonCode
	i0 += 2

	// obj.Reserved
	i0 += 4 + uint64(len(obj.Reserved))

	return i0
}

// encodeDisconnectMessage encodes an object of type DisconnectMessage to the buffer in encoder.Encoder.
// The buffer must be large enough to encode the object, otherwise an error is returned.
func encodeDisconnectMessage(buf []byte, obj *DisconnectMessage) error {
	e := &encoder.Encoder{
		Buffer: buf[:],
	}

	// obj.ReasonCode
	e.Uint16(obj.ReasonCode)

	// obj.Reserved length check
	if uint64(len(obj.Reserved)) > math.MaxUint32 {
		return errors.New("obj.Reserved length exceeds math.MaxUint32")
	}

	// obj.Reserved length
	e.Uint32(uint32(len(obj.Reserved)))

	// obj.Reserved copy
	e.CopyBytes(obj.Reserved)

	return nil
}

// decodeDisconnectMessage decodes an object of type DisconnectMessage from the buffer in encoder.Decoder.
// Returns the number of bytes used from the buffer to decode the object.
func decodeDisconnectMessage(buf []byte, obj *DisconnectMessage) (int, error) {
	d := &encoder.Decoder{
		Buffer: buf[:],
	}

	{
		// obj.ReasonCode
		i, err := d.Uint16()
		if err != nil {
			return len(buf) - len(d.Buffer), err
		}
		obj.ReasonCode = i
	}

	{
		// obj.Reserved

		ul, err := d.Uint32()
		if err != nil {
			return len(buf) - len(d.Buffer), err
		}

		length := int(ul)
		if length < 0 || length > len(d.Buffer) {
			return len(buf) - len(d.Buffer), encoder.ErrBufferUnderflow
		}

		if length != 0 {
			obj.Reserved = make([]byte, length)

			copy(obj.Reserved[:], d.Buffer[:length])
			d.Buffer = d.Buffer[length:]
		}
	}

	return len(buf) - len(d.Buffer), nil
}
